"""
Django settings for music_store project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%*_n71wgjxu72g0w$a&$3wpse#rqb!mdh*8iht9*o(aaneksw-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # START manually built apps
    'core',
    'api',
    # END manually built apps
    # START django manage.py built apps
    'store',
    'dashboard',
    # END django manage.py built apps
    # START third-party packages app
    'rest_framework', # Restful API library for Django
    'oauth2_provider', # Oauth2 library especially made for django with django rest framework integration
    'rest_framework_docs', # Library for creating API Documentation
    'markdown',
    # 'devserver', # This is used to check the operation performance done on the backend
    # END third-party packages app

]

MIDDLEWARE_CLASSES = [
    # 'oauth2_provider.middleware.CorsMiddleware', # To let the allowed_uris be the CORSHeader whitelist
    # 'devserver.middleware.DevServerMiddleware',  # Middleware for the devserver
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Extra DEVSERVER logging
# DEVSERVER_MODULES = (
#     'devserver.modules.sql.SQLRealTimeModule',
#     'devserver.modules.sql.SQLSummaryModule',
#     'devserver.modules.profile.ProfileSummaryModule',

#     # Modules not enabled by default
#     'devserver.modules.ajax.AjaxDumpModule',
#     'devserver.modules.profile.MemoryUseModule',
#     'devserver.modules.cache.CacheSummaryModule',
#     'devserver.modules.profile.LineProfilerModule',
# )

# DEVSERVER_AUTO_PROFILE = True # profiles all views without the need of function decorator

ROOT_URLCONF = 'music_store.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'music_store.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

# START Django Rest Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.ext.rest_framework.OAuth2Authentication',
    ),
    # Disables the Admin UI of the Django Rest Framework
    # Source: http://stackoverflow.com/questions/11898065/how-to-disable-admin-style-browsable-interface-of-django-rest-framework
    # 'DEFAULT_RENDERER_CLASSES': (
    #     'rest_framework.renderers.JSONRenderer',
    # )
}
# END Django Rest Framework settings

# ELASTICSEARCH_AUTO_INDEX = 1

# # START Custom Global Methods Settings
# def standardResponse(data=[], errors=[], **kwargs):
#     return {"data":data, "errors":errors}

# def pagination(page):
#     if page:
#         page = int(page)
#         items_per_page = 5
#         offset = (page - 1) * items_per_page
#         limit = page * items_per_page
#         return ( offset, limit )
#     else:
#         return False
# # END Custom Global Methods Settings
